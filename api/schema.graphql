# import Post, DateTime from "generated/prisma.graphql"
# import * from "types/user.graphql"
# import * from "types/admin.graphql"
# import * from "types/portal.graphql"

scalar Upload

type Query {
  feed: [Post!]!
  drafts: [Post!]!
  post(id: ID!): Post
  user: User
  users: [User]
  admins: [User]
  uploads: [File]
  content: Content
  project(id: String slug: String): Project
  projects: [Project]
  projectCategories(id: String slug: String): [ProjectCategory]
  projectTags(id: String slug: String): [ProjectTag]
  village(id: String slug: String): Village
  villages: [Village]
  news(id: String): News
  newsAll: [News]

}

type Mutation {
  signup(email: String! password: String! cart: String): AuthPayload!
  login(email: String! password: String!): AuthPayload!
  subscribe(email: String!): Boolean
  createDraft(title: String! text: String!): Post!
  publish(id: ID!): Post!
  deletePost(id: ID!): Post!
  updateUser(input: UserInput): User!
  updateUserRole(userId: ID! role: Role!): User!
  uploadFile(file: Upload!): File
  uploadFiles(file: Upload!): [File]
  renameFile(file: Upload!): File!
  deleteFile(file: Upload!): File!
  sendPasswordResetEmail(email: String!): Boolean
  resetPassword(password: String! hash: String!): Boolean
  updateContent(input: ContentInput!): Content
  saveProject(input: ProjectInput): Project
  saveProjectCategory(input: ProjectCategoryInput): ProjectCategory
  saveProjectTag(input: ProjectTagInput): ProjectTag
  saveVillage(input: VillageInput): Village
  saveNews(input: NewsInput): News
  removeProject(id: ID!): String
  removeProjectCategory(id: ID!): String
  removeProjectTag(id: ID!): String
  removeVillage(id: ID!): String
  removeNews(id: ID!): String

}

type Subscription {
  feedSubscription: PostSubscriptionPayload!
}